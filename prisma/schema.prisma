generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(uuid())
  name             String
  email            String             @unique
  password         String
  role             String
  referralCode     String             @unique
  points           Int                @default(0)
  pointsExpiry     DateTime?
  transactions     Transaction[]
  eventsCreated    Event[]            @relation("OrganizerEvents")
  Review           Review[]
  OrganizerRequest OrganizerRequest[]
}

model OrganizerRequest {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  organizationName String
  email            String
  address          String
  status           String   @default("pending") // pending | approved | rejected
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Event {
  id          String        @id @default(uuid())
  name        String
  type        String
  location    String
  startDate   DateTime
  endDate     DateTime
  description String?
  imageURL    String?
  organizer   User          @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId String
  ticketTypes TicketType[]
  reviews     Review[]
  Voucher     Voucher[]
  Transaction Transaction[]
}

model TicketType {
  id           String        @id @default(uuid())
  event        Event         @relation(fields: [eventId], references: [id])
  eventId      String
  name         String
  price        Int
  quota        Int
  transactions Transaction[]
}

model Voucher {
  code      String        @id
  event     Event         @relation(fields: [eventId], references: [id])
  eventId   String
  discount  Int
  startDate DateTime
  endDate   DateTime
  usedBy    Transaction[]
}

model Transaction {
  id              String     @id @default(uuid())
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  event           Event      @relation(fields: [eventId], references: [id])
  eventId         String
  ticketType      TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId    String
  quantity        Int
  totalPrice      Int
  status          String
  createdAt       DateTime   @default(now())
  expiresAt       DateTime
  paymentProofUrl String?
  Voucher         Voucher?   @relation(fields: [voucherCode], references: [code])
  voucherCode     String?
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}
