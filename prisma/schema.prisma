generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  CUSTOMER
  ORGANIZER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PointType {
  CREDIT
  DEBIT
}

enum CouponStatus {
  ACTIVE
  EXPIRED
  USED
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELLED
}

enum EventType {
  ONLINE
  OFFLINE
}

model User {
  id             String            @id @default(cuid())
  email          String            @unique
  passwordHash   String
  name           String
  bio            String?
  avatarUrl      String?
  role           UserRole          @default(CUSTOMER)
  referralCode   String?           @unique
  referredByCode String?
  referredById   String?
  referredBy     User?             @relation("UserReferral", fields: [referredById], references: [id])
  referrals      User[]            @relation("UserReferral")
  points         Int               @default(0)
  vouchers       Voucher[]
  organizer      OrganizerProfile?
  transactions   Transaction[]
  pointsHistory  PointHistory[]
  coupons        Coupon[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  Review         Review[]

  @@index([role])
}

model OrganizerProfile {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String         @unique
  orgName   String
  orgDetail String
  status    ApprovalStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Event     Event[]
}

model Event {
  id             String           @id @default(cuid())
  title          String
  type           EventType
  description    String?
  location       String
  startDate      DateTime
  endDate        DateTime
  availableSeats Int
  price          Int
  organizer      OrganizerProfile @relation(fields: [organizerId], references: [id])
  organizerId    String
  transaction    Transaction[]
  reviews        Review[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([organizerId])
  @@index([startDate, endDate])
}

model Transaction {
  id         String            @id @default(cuid())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  event      Event             @relation(fields: [eventId], references: [id])
  eventId    String
  quantity   Int               @default(1)
  totalPrice Int
  status     TransactionStatus @default(WAITING_PAYMENT)
  proofUrl   String?
  voucherId  String?
  coupon     Coupon?           @relation(fields: [voucherId], references: [id])
  pointsUsed Int?              @default(0)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([userId])
  @@index([eventId])
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@index([eventId])
}

model Voucher {
  id         String   @id @default(cuid())
  code       String   @unique
  discount   Int
  validForm  DateTime
  validUntil DateTime
  used       Boolean  @default(false)
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String
  createdAt  DateTime @default(now())

  @@index([validUntil])
}

model PointHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  points    Int
  type      String   @default("CREDIT")
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Coupon {
  id             String        @id @default(cuid())
  code           String        @unique
  discountAmount Int
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  status         CouponStatus  @default(ACTIVE)
  isUsed         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  expiresAt      DateTime
  Transaction    Transaction[]
}
